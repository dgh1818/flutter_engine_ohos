diff --git a/runtime/BUILD.gn b/runtime/BUILD.gn 
index 7f89f9fcd06..edeb765c7e4 100644
--- a/runtime/BUILD.gn
+++ b/runtime/BUILD.gn
@@ -87,11 +87,6 @@ config("dart_precompiler_config") {
 
 config("dart_os_config") {
   defines = []
-  if (target_os == "linux" && !is_mac) {
-    target_os = "ohos"
-  } else if (is_mac){
-    target_os = "mac"
-  }
   print("DART  TARGET OS: "+target_os )
   if (target_os == "android") {
     defines += [ "DART_TARGET_OS_ANDROID" ]
@@ -104,7 +99,9 @@ config("dart_os_config") {
     defines += [ "DART_TARGET_OS_LINUX" ]
   } else if (target_os == "ohos") {
     defines += [ "DART_TARGET_OS_OHOS" ]
-    print("DART  TARGET OS OHOS")
+    if (is_ohos) {
+      defines += [ "DART_RUNTIME_OS_OHOS" ]
+    }
   } else if (target_os == "mac") {
     defines += [ "DART_TARGET_OS_MACOS" ]
   } else if (target_os == "win") {
@@ -255,6 +252,11 @@ config("dart_config") {
       cflags += [ "-O3" ]
     }
 
+
+    if (is_ohos) {
+      ldflags += ["-lhilog_ndk.z"]
+    }
+
     if (is_fuchsia) {
       # safe-stack does not work with the interpreter.
       cflags += [
diff --git a/runtime/bin/BUILD.gn b/runtime/bin/BUILD.gn
index 14548125acb..2b758ae2db9 100644
--- a/runtime/bin/BUILD.gn
+++ b/runtime/bin/BUILD.gn
@@ -37,9 +37,6 @@ config("libdart_builtin_config") {
     is_linux = false
   }
 
-  print("dart runtime is_linux:" ,is_linux)
-  print("dart runtime is_win:" ,is_win)
-  print("dart runtime is_ohos:" , is_ohos)
   if(is_ohos && !is_win){
       libs +=[
         "hilog_ndk.z"
diff --git a/runtime/bin/builtin_natives.cc b/runtime/bin/builtin_natives.cc
index 5e70d68bfc6..185638b034e 100644
--- a/runtime/bin/builtin_natives.cc
+++ b/runtime/bin/builtin_natives.cc
@@ -18,11 +18,9 @@
 #include "bin/io_natives.h"
 #include "bin/platform.h"
 
-#ifdef  DART_TARGET_OS_OHOS
-#ifndef DART_HOST_OS_WINDOWS
-//#include <hilog/log.h>
-//#include <pthread.h>
-#endif
+#ifdef  DART_HOST_OS_OHOS
+#include <hilog/log.h>
+#include <pthread.h>
 #endif
 
 namespace dart {
@@ -114,13 +112,11 @@ void FUNCTION_NAME(Builtin_PrintString)(Dart_NativeArguments args) {
     ASSERT(res == nullptr);
   }
 
-#ifdef  DART_TARGET_OS_OHOS
-#ifndef DART_HOST_OS_WINDOWS
- // {
- //   pthread_t thread = pthread_self();
- //   OH_LOG_Print(LOG_APP,LOG_INFO,LOG_DOMAIN,"XComDartVm","Thread:%{public}lu %{public}s",thread,chars) ;
- // }
-#endif
+#ifdef  DART_HOST_OS_OHOS
+ {
+   pthread_t thread = pthread_self();
+   OH_LOG_Print(LOG_APP,LOG_INFO,LOG_DOMAIN,"XComDartVm","Thread:%{public}lu %{public}s",thread,chars);
+ }
 #endif
 }
 
diff --git a/runtime/bin/security_context_ohos.cc b/runtime/bin/security_context_ohos.cc
index 2ae284f0972..5d801a5b07b 100644
--- a/runtime/bin/security_context_ohos.cc
+++ b/runtime/bin/security_context_ohos.cc
@@ -30,7 +30,6 @@ const intptr_t SSLCertContext::kApproximateSize =
     sizeof(SSLCertContext) + root_certificates_pem_length;
 
 void SSLCertContext::TrustBuiltinRoots() {
-  // First, try to use locations specified on the command line.
   if (root_certs_file() != NULL) {
     LoadRootCertFile(root_certs_file());
     return;
@@ -40,35 +39,17 @@ void SSLCertContext::TrustBuiltinRoots() {
     return;
   }
 
-  if (bypass_trusting_system_roots()) {
-    if (SSL_LOG_STATUS) {
-      Syslog::Print("Bypass trusting Linux built-in roots\n");
-    }
-  } else {
-    // On Linux, we use the compiled-in trusted certs as a last resort. First,
-    // we try to find the trusted certs in various standard locations. A good
-    // discussion of the complexities of this endeavor can be found here:
-    //
-    // https://www.happyassassin.net/2015/01/12/a-note-about-ssltls-trusted-certificate-stores-and-platforms/
-    const char* bundle = "/etc/pki/tls/certs/ca-bundle.crt";
-    const char* cachedir = "/etc/ssl/certs";
-    if (File::Exists(NULL, bundle)) {
-      LoadRootCertFile(bundle);
-      return;
-    }
-
-    if (Directory::Exists(NULL, cachedir) == Directory::EXISTS) {
-      LoadRootCertCache(cachedir);
-      return;
-    }
+  const char* bundle = "/etc/ssl/certs/cacert.pem";
+  const char* cachedir = "/etc/ssl/certs";
+  if (File::Exists(NULL, bundle)) {
+    LoadRootCertFile(bundle);
+    return;
   }
 
-  // Fall back on the compiled-in certs if the standard locations don't exist,
-  // or we aren't on Linux.
-  if (SSL_LOG_STATUS) {
-    Syslog::Print("Trusting compiled-in roots\n");
+  if (Directory::Exists(NULL, cachedir) == Directory::EXISTS) {
+    LoadRootCertCache(cachedir);
+    return;
   }
-  AddCompiledInCerts();
 }
 
 void SSLCertContext::RegisterCallbacks(SSL* ssl) {
diff --git a/runtime/platform/globals.h b/runtime/platform/globals.h
index f8a861e6c54..ca859e2b421 100644
--- a/runtime/platform/globals.h
+++ b/runtime/platform/globals.h
@@ -108,7 +108,7 @@
 // Check for Android first, to determine its difference from Linux.
 #define DART_HOST_OS_ANDROID 1
 
-#elif defined(DART_TARGET_OS_OHOS) && !defined(_WIN32)
+#elif defined(DART_TARGET_OS_OHOS) && defined(DART_RUNTIME_OS_OHOS)
 
 #define DART_HOST_OS_OHOS 1
 
diff --git a/runtime/platform/syslog_ohos.cc b/runtime/platform/syslog_ohos.cc
index 3dcbc463dc6..139881f7271 100644
--- a/runtime/platform/syslog_ohos.cc
+++ b/runtime/platform/syslog_ohos.cc
@@ -7,20 +7,40 @@
 
 #include "platform/syslog.h"
 
-#include <stdio.h>  // NOLINT
+#include <hilog/log.h>    // NOLINT
+#include <stdio.h>        // NOLINT
 
 namespace dart {
+#define HILOG_LOG_DOMAIN 0x0000
+#define HILOG_LOG_TAG "Dart"
 
 void Syslog::VPrint(const char* format, va_list args) {
-  vfprintf(stdout, format, args);
+
+  va_list stdio_args;
+  va_copy(stdio_args, args);
+  vprintf(format, stdio_args);
   fflush(stdout);
+  va_end(stdio_args);
+
+  va_list log_args;
+  va_copy(log_args, args);
+  ((void)OH_LOG_Print(LOG_APP, LOG_INFO, HILOG_LOG_DOMAIN, \
+                      HILOG_LOG_TAG, format, log_args));
+  va_end(log_args);
 }
 
 void Syslog::VPrintErr(const char* format, va_list args) {
-  vfprintf(stderr, format, args);
-  fflush(stderr);
+  va_list stdio_args;
+  va_copy(stdio_args, args);
+  vprintf(format, stdio_args);
+  fflush(stdout);
+  va_end(stdio_args);
+  va_list log_args;
+  va_copy(log_args, args);
+  ((void)OH_LOG_Print(LOG_APP, LOG_ERROR, HILOG_LOG_DOMAIN, \
+                      HILOG_LOG_TAG, format, log_args));
+  va_end(log_args);
 }
 
 }  // namespace dart
-
 #endif  // defined(DART_HOST_OS_OHOS)
diff --git a/runtime/vm/os_ohos.cc b/runtime/vm/os_ohos.cc
index 7ac0322c01c..2f6b4990a9f 100644
--- a/runtime/vm/os_ohos.cc
+++ b/runtime/vm/os_ohos.cc
@@ -32,6 +32,7 @@
 #include "vm/timeline.h"
 #include "vm/zone.h"
 
+#include <hilog/log.h>    // NOLINT
 namespace dart {
 
 #ifndef PRODUCT
@@ -565,7 +566,7 @@ DART_NOINLINE uintptr_t OS::GetProgramCounter() {
 void OS::Print(const char* format, ...) {
   va_list args;
   va_start(args, format);
-  VFPrint(stdout, format, args);
+  ((void)OH_LOG_Print(LOG_APP, LOG_INFO, 0x0000, "DartVM", format, args));
   va_end(args);
 }
 
@@ -645,7 +646,7 @@ void OS::RegisterCodeObservers() {
 void OS::PrintErr(const char* format, ...) {
   va_list args;
   va_start(args, format);
-  VFPrint(stderr, format, args);
+  ((void)OH_LOG_Print(LOG_APP, LOG_ERROR, 0x0000, "DartVM", format, args));
   va_end(args);
 }
 
